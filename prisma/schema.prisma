generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?       @db.Text
  role           user_role      @default(APPLICANT)
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  department     String?
  accounts       Account[]
  sessions       Session[]
  applications   Application[]
  hrChats        Chat[]         @relation("HRChats")
  applicantChats Chat[]         @relation("ApplicantChats")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id          String         @id @default(cuid())
  title       String
  description String         @db.Text
  department  String
  status      job_status     @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  applications Application[]
}

model Application {
  id        String              @id @default(cuid())
  userId    String
  jobId     String
  status    application_status  @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  job       Job                 @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jobId])
}

model Chat {
  id        String   @id @default(cuid())
  hrId      String
  applicantId String
  status    String   @default("ACTIVE") // ACTIVE, CLOSED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hr        User     @relation("HRChats", fields: [hrId], references: [id])
  applicant User     @relation("ApplicantChats", fields: [applicantId], references: [id])

  @@index([hrId])
  @@index([applicantId])
}

enum user_role {
  ADMIN
  HR
  DEPARTMENT
  APPLICANT
}

enum job_status {
  ACTIVE
  INACTIVE
  CLOSED
}

enum application_status {
  PENDING
  ACCEPTED
  REJECTED
}
